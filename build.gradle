plugins {
    id "maven-publish"
    id "dev.architectury.loom" version "1.7-SNAPSHOT"
}

def loader = property("loom.platform")
def isFabric = loader == "fabric"
def mcVersion = property("deps.minecraft")

version = property("mod.version") + "+" + mcVersion + "+" + loader
group = "dev.imb11"

base {
    archivesName = property("mod.name")
}

repositories {
    mavenCentral()
    maven { url "https://maven.neoforged.net/releases/" }
    mavenLocal()
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url 'https://maven.wispforest.io' }
    maven { url 'https://maven.imb11.dev/releases' }
    maven { url "https://maven.neoforged.net/releases/" }
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://maven.quiltmc.org/repository/release" }
    maven { url 'https://maven.terraformersmc.com/releases' }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

afterEvaluate {
    stonecutter {
        def platform = property("loom.platform")
        stonecutter.const("fabric", platform == "fabric")
        stonecutter.const("forge", platform == "forge")
        stonecutter.const("neoforge", platform == "neoforge")
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${property("deps.minecraft")}"
    mappings(loom.layered {
        mappings("net.fabricmc:yarn:${property("deps.yarn")}:v2")
        if (stonecutter.eval(mcVersion, ">=1.20.6")) {
            mappings("dev.architectury:yarn-mappings-patch-neoforge:${mcVersion}+build.4")
        }
    })

    modImplementation(include("dev.architectury:architectury-${loader}:${property("deps.arch_api")}"))
    modImplementation ("dev.imb11:mru:${property("deps.mru")}+${mcVersion}+${loader}", {
        transitive = false
    })

    modCompileOnly "dev.emi:emi-${loader}:${property("compile.emi")}"
    modCompileOnly "maven.modrinth:inventorio:${property("compile.inventorio")}"

    if (isFabric) {
        modImplementation "net.fabricmc:fabric-loader:+"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric_api')}"

        modImplementation(include("dev.isxander:yet-another-config-lib:${property("deps.yacl")}-${loader}"))

        modLocalRuntime modCompileOnly("com.terraformersmc:modmenu:${property("runtime.modmenu")}")
        include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.5.0-beta.2")))
    } else {
        modImplementation(include("dev.isxander:yet-another-config-lib:${property("deps.yacl")}-${loader}"), {
            transitive = false
        })

        "forgeRuntimeLibrary"(implementation include("com.twelvemonkeys.imageio:imageio-core:3.10.0"))
        "forgeRuntimeLibrary"(implementation include("com.twelvemonkeys.imageio:imageio-webp:3.10.0"))
        "forgeRuntimeLibrary"(implementation include("com.twelvemonkeys.imageio:imageio-metadata:3.10.0"))
        "forgeRuntimeLibrary"(implementation include("com.twelvemonkeys.common:common-lang:3.10.0"))
        "forgeRuntimeLibrary"(implementation include("com.twelvemonkeys.common:common-io:3.10.0"))
        "forgeRuntimeLibrary"(implementation include("com.twelvemonkeys.common:common-image:3.10.0"))
        "forgeRuntimeLibrary"(implementation include("org.quiltmc.parsers:json:0.2.1"))
        "forgeRuntimeLibrary"(implementation include("org.quiltmc.parsers:gson:0.2.1"))

        if (loader == "forge") {
            "forge"("net.minecraftforge:forge:${mcVersion}-${property("deps.fml")}")

            compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.5.0-beta.2"))
            implementation(include("io.github.llamalad7:mixinextras-forge:0.5.0-beta.2"))
        } else {
            "neoForge"("net.neoforged:neoforge:${property("deps.neoforge")}")
            include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-neoforge:0.5.0-beta.2")))
        }
    }

}

if (stonecutter.current.active) { // run configs for non-active version would be invalid
    loom {
        runConfigs.all {
            ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
            runDir "../../run" // use a global run directory for all versions
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    file('src/main/generated')
            ]
        }
    }
}


loom {
    if (loader == "fabric" && stonecutter.eval(stonecutter.current.version, ">=1.21")) {
        runs {
            datagenClient {
                client()
                name "Data Generation Client"
                vmArg "-Dfabric-api.datagen"
                vmArg "-Dfabric-api.datagen.output-dir=" + getRootDir().toPath().resolve("src/main/generated")
                vmArg "-Dfabric-api.datagen.modid=sounds"

                ideConfigGenerated = false
                runDir "build/datagen"
            }
        }
    }

    if (loader == "forge") {
        forge {
            convertAccessWideners = true
            mixinConfig "sounds.mixins.json"
        }
    }
    accessWidenerPath = getRootProject().file("src/main/resources/sounds.accesswidener")

    mixin {
        // TODO: Remove this when TinyRemapper gains MixinExtras beta Support!
        useLegacyMixinAp = true
    }
}

java {
    var version = stonecutter.eval(stonecutter.current.version, ">1.20.4") ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17

    sourceCompatibility = version
    targetCompatibility = version
}

tasks.register('buildAndCollect', Copy) {
    group = "build"
    from(tasks.remapJar.archiveFile)
    into(rootProject.layout.buildDirectory.file("libs"))
    dependsOn("build")
}


processResources {
    def props = [
            mod_version: version,
            target_minecraft: project.property("mod.target"),
            target_mru: project.property("deps.mru") + "+" + mcVersion + "+" + loader
    ]

    if (loader == "forge" || loader == "neoforge") {
        props.target_loader = project.property("fml.target")
        props.loader = loader
        props.mandatory_inclusion_field = (loader == "forge") ? "mandatory = true" : "type = \"required\""
    }

//    if (loader == "fabric") {
//        props.target_architectury = project.property("deps.arch_api")
//    }

    props.each { key, value -> inputs.property(key, value) }

    if (loader == "fabric") {
        filesMatching("fabric.mod.json") { expand(props) }
        exclude(["META-INF/mods.toml"])
    }

    if (loader == "forge" || loader == "neoforge") {
        filesMatching(["META-INF/mods.toml", "META-INF/neoforge.mods.toml"]) { expand(props) }
        exclude("fabric.mod.json")

        if (stonecutter.eval(mcVersion, ">1.20.4")) {
            exclude("META-INF/mods.toml")
        } else {
            exclude("META-INF/neoforge.mods.toml")
        }
    }

    // expand ${pack_format} in pack.mcmeta


    int packFormat;
    switch (mcVersion) {
        case "1.20.1":
            packFormat = 15;
            break;
        case "1.21":
            packFormat = 34;
            break;
        case "1.21.3":
            packFormat = 42;
            break;
        default:
            throw new IllegalArgumentException("Unsupported Minecraft version: " + mcVersion);
    }

    filesMatching("pack.mcmeta") {
        expand("pack_format": packFormat)
    }

    filesMatching("sounds.mixins.json") {
        expand("version": mcVersion + "-" + loader)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

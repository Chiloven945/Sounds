plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
}

version =  property("mod.version") + "+" + stonecutter.current.version
group = "dev.imb11"

base {
    archivesName = property("mod.name")
}

repositories {
    mavenCentral()
    mavenLocal()
    mavenCentral()
    maven { url "https://maven.terraformersmc.com/releases" }
    maven { url 'https://maven.isxander.dev/releases' }
    maven { url "https://jitpack.io" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://maven.imb11.dev/releases" }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${stonecutter.current.version}"
    mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"

    modImplementation "net.fabricmc:fabric-loader:+"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric_api')}"

    modImplementation include("dev.isxander:yet-another-config-lib:${property("deps.yacl")}") {
        exclude group: "net.fabricmc.fabric-api", module: "fabric-api"
    }
    modLocalRuntime modCompileOnly("com.terraformersmc:modmenu:${property("runtime.modmenu")}")
    modImplementation "com.mineblock11:MRU:${property("deps.mru")}"

    modCompileOnly "dev.emi:emi-fabric:${property("compile.emi")}"

    modCompileOnly ("maven.modrinth:inventorio:${property("compile.inventorio")}")
}

if (stonecutter.current.active) { // run configs for non-active version would be invalid
    loom {
        runConfigs.all {
            ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
            runDir "../../run" // use a global run directory for all versions
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    file('src/main/generated')
            ]
        }
    }
}


loom {
    runs {
        datagenClient {
            client()
            name "Data Generation Client"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=" + getRootDir().toPath().resolve("src/main/generated")
            vmArg "-Dfabric-api.datagen.modid=sounds"

            ideConfigGenerated = false
            runDir "build/datagen"
        }
    }

    accessWidenerPath = getRootProject().file("src/main/resources/aw/" + stonecutter.current.version + ".accesswidener")
}

java {
//    withSourcesJar()
    var version = (stonecutter.compare("1.20.4", stonecutter.current.version) > 0) ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17

    sourceCompatibility = version
    targetCompatibility = version
}

processResources {
    filesMatching('fabric.mod.json') {
        expand 'mod_version': version,
                'target_minecraft': project.property('mod.target'),
                'target_yacl': project.property('deps.yacl'),
                'minecraft_version': stonecutter.current.version
    }

//    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}
